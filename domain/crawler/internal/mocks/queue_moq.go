// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"monzoCrawler/domain/crawler"
	"sync"
)

// Ensure, that QueueMock does implement crawler.Queue.
// If this is not the case, regenerate this file with moq.
var _ crawler.Queue = &QueueMock{}

// QueueMock is a mock implementation of crawler.Queue.
//
// 	func TestSomethingThatUsesQueue(t *testing.T) {
//
// 		// make and configure a mocked crawler.Queue
// 		mockedQueue := &QueueMock{
// 			PushFunc: func(val interface{}) error {
// 				panic("mock out the Push method")
// 			},
// 		}
//
// 		// use mockedQueue in code that requires crawler.Queue
// 		// and then make assertions.
//
// 	}
type QueueMock struct {
	// PushFunc mocks the Push method.
	PushFunc func(val interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Push holds details about calls to the Push method.
		Push []struct {
			// Val is the val argument value.
			Val interface{}
		}
	}
	lockPush sync.RWMutex
}

// Push calls PushFunc.
func (mock *QueueMock) Push(val interface{}) error {
	if mock.PushFunc == nil {
		panic("QueueMock.PushFunc: method is nil but Queue.Push was just called")
	}
	callInfo := struct {
		Val interface{}
	}{
		Val: val,
	}
	mock.lockPush.Lock()
	mock.calls.Push = append(mock.calls.Push, callInfo)
	mock.lockPush.Unlock()
	return mock.PushFunc(val)
}

// PushCalls gets all the calls that were made to Push.
// Check the length with:
//     len(mockedQueue.PushCalls())
func (mock *QueueMock) PushCalls() []struct {
	Val interface{}
} {
	var calls []struct {
		Val interface{}
	}
	mock.lockPush.RLock()
	calls = mock.calls.Push
	mock.lockPush.RUnlock()
	return calls
}
